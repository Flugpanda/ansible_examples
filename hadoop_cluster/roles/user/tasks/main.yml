---
# Create a user to run hadoop
# - name: Add the user {{ hadoop_user }}
#   user:
#     name: "{{ hadoop_user }}"
#     comment: User for running the hadoop
#     shell: /bin/bash
#     append: yes
#   when: add_user

- name: Add User 
  user: name={{hadoop_user}} shell=/bin/bash append=yes
  when: add_user

# check if the hadoop user has a public key
- name: Check Public Key
  shell: "ls /home/{{ hadoop_user }}/.ssh|grep '.pub' |wc -l"
  register: key_exist
  ignore_errors: true

# generate a keypair if none exists
- name: Generate Public key
  user:
    name: "{{ hadoop_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  when: "key_exist.stdout == '0' and generate_key"

# test if environment variables are already set
- name: test env variables in {{badoop_user}} .bashrc
  command: grep -Fxq "export HADOOP_INSTALL=$HADOOP_HOME" /home/{{hadoop_user}}/.bashrc
  register: envisset
  check_mode: no
  ignore_errors: yes
  changed_when: no

# add environment variables
- name: Set hadoop env variables to {{badoop_user}} .bashrc
  blockinfile:
    path: /home/{{hadoop_user}}/.bashrc
    block: |
      export HADOOP_HOME=/home/{{hadoop_user}}/hadoop
      export HADOOP_INSTALL=$HADOOP_HOME
      export HADOOP_MAPRED_HOME=$HADOOP_HOME
      export HADOOP_COMMON_HOME=$HADOOP_HOME
      export HADOOP_HDFS_HOME=$HADOOP_HOME
      export HADOOP_YARN_HOME=$HADOOP_HOME
      export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
      export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
      export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib/native"
  when: envisset.rc != 0
